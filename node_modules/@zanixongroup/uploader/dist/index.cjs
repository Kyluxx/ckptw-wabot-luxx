"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  Catbox: () => Catbox,
  Cloudku: () => Cloudku,
  Erhabot: () => Erhabot,
  FastUrl: () => FastUrl,
  IDNet: () => IDNet,
  Litterbox: () => Litterbox,
  Nyxs: () => Nyxs,
  Pomf: () => Pomf,
  Quax: () => Quax,
  Ryzen: () => Ryzen,
  Shojib: () => Shojib,
  TmpErhabot: () => TmpErhabot,
  Uguu: () => Uguu,
  Videy: () => Videy,
  default: () => index_default
});
module.exports = __toCommonJS(index_exports);

// src/services/catbox.ts
var catbox_exports = {};
__export(catbox_exports, {
  Catbox: () => Catbox,
  default: () => catbox_default
});
var import_axios = __toESM(require("axios"));
var import_form_data = __toESM(require("form-data"));

// src/utils/helper.ts
function FileSize(data) {
  if (!(data instanceof Uint8Array)) throw new Error("Invalid buffer data!");
  return data.length;
}
function MaxFileSize(data) {
  if (!Number.isInteger(data)) throw new Error("Invalid number data!");
  return data * 1024576;
}
async function MimeType(data) {
  if (!(data instanceof Uint8Array)) throw new Error("Invalid buffer data!");
  const { fileTypeFromBuffer } = await import("file-type");
  return fileTypeFromBuffer(data);
}

// src/services/catbox.ts
async function Catbox(data) {
  if (!Buffer.isBuffer(data)) throw new Error("Invalid buffer input!");
  if (FileSize(data) >= MaxFileSize(200)) throw new Error("Max file upload for catbox is only 200MB!");
  const type = await MimeType(data);
  const form = new import_form_data.default();
  form.append("fileToUpload", Buffer.from(data), {
    filename: "zxn-" + Date.now() + "." + type?.ext,
    contentType: type?.mime || ""
  });
  form.append("userhash", "");
  form.append("reqtype", "fileupload");
  const raw = await import_axios.default.post("https://catbox.moe/user/api.php", form, {
    headers: {
      ...form.getHeaders(),
      "origin": "https://litterbox.catbox.moe",
      "user-agent": "Postify/1.0.0"
    }
  });
  return raw?.data || null;
}
var catbox_default = Catbox;

// src/services/erhabot.ts
var erhabot_exports = {};
__export(erhabot_exports, {
  Erhabot: () => Erhabot,
  default: () => erhabot_default
});
var import_axios2 = __toESM(require("axios"));
var import_form_data2 = __toESM(require("form-data"));
async function Erhabot(data) {
  if (!Buffer.isBuffer(data)) throw new Error("Invalid buffer input!");
  if (FileSize(data) >= MaxFileSize(5)) throw new Error("Max file upload for catbox is only 5MB!");
  const type = await MimeType(data);
  if (!type || !["jpg", "jpeg", "png"].includes(type?.ext)) throw Error("Only support image!");
  const form = new import_form_data2.default();
  form.append("file", Buffer.from(data), {
    filename: type ? "erha-" + Date.now() + "." + type?.ext : "",
    contentType: type?.mime || ""
  });
  const raw = await import_axios2.default.post("https://cdn.erhabot.com/upload", form, {
    headers: {
      ...form.getHeaders(),
      "origin": "https://litterbox.catbox.moe",
      "user-agent": "Postify/1.0.0"
    }
  });
  return raw?.data?.data?.url || null;
}
var erhabot_default = Erhabot;

// src/services/fasturl.ts
var fasturl_exports = {};
__export(fasturl_exports, {
  FastUrl: () => FastUrl,
  default: () => fasturl_default
});
var import_axios3 = __toESM(require("axios"));
var import_form_data3 = __toESM(require("form-data"));
async function FastUrl(data) {
  if (!Buffer.isBuffer(data)) throw new Error("Invalid buffer input!");
  if (FileSize(data) >= MaxFileSize(100)) throw new Error("Max file upload for catbox is only 100MB!");
  const mime = await MimeType(data);
  const form = new import_form_data3.default();
  form.append("file", Buffer.from(data), {
    filename: mime ? "zxn-" + Date.now() + "." + mime?.ext : "",
    contentType: mime?.mime || ""
  });
  const raw = await import_axios3.default.post("https://fastrestapis.fasturl.cloud/downup/uploader-v2", form, {
    headers: {
      ...form.getHeaders()
    }
  });
  return raw?.data?.result || null;
}
var fasturl_default = FastUrl;

// src/services/litterbox.ts
var litterbox_exports = {};
__export(litterbox_exports, {
  Litterbox: () => Litterbox,
  default: () => litterbox_default
});
var import_axios4 = __toESM(require("axios"));
var import_form_data4 = __toESM(require("form-data"));
async function Litterbox(data) {
  if (!Buffer.isBuffer(data)) throw new Error("Invalid buffer input!");
  if (FileSize(data) >= MaxFileSize(1e3)) throw new Error("Max file upload for Litterbox is only 1GB!");
  const type = await MimeType(data);
  const form = new import_form_data4.default();
  form.append("fileToUpload", Buffer.from(data), {
    filename: type ? "zxn-" + Date.now() + "." + type?.ext : "",
    contentType: type?.mime || ""
  });
  form.append("userhash", "");
  form.append("reqtype", "fileupload");
  const raw = await import_axios4.default.post("https://litterbox.catbox.moe/resources/internals/api.php", form, {
    headers: {
      ...form.getHeaders(),
      "origin": "https://litterbox.Litterbox.moe",
      "user-agent": "Postify/1.0.0"
    }
  });
  return raw?.data || null;
}
var litterbox_default = Litterbox;

// src/services/pomf.ts
var pomf_exports = {};
__export(pomf_exports, {
  Pomf: () => Pomf,
  default: () => pomf_default
});
var import_axios5 = __toESM(require("axios"));
var import_form_data5 = __toESM(require("form-data"));
async function Pomf(data) {
  if (!Buffer.isBuffer(data)) throw new Error("Invalid buffer input!");
  if (FileSize(data) >= MaxFileSize(1e3)) throw new Error("Max file upload for catbox is only 1GB!");
  const mime = await MimeType(data);
  const form = new import_form_data5.default();
  form.append("files[]", Buffer.from(data), {
    filename: mime ? "zxn-" + Date.now() + "." + mime?.ext : "",
    contentType: mime?.mime || ""
  });
  const raw = await import_axios5.default.post("https://pomf.lain.la/upload.php", form, {
    headers: {
      ...form.getHeaders(),
      "origin": "https://pomf.lain.la",
      "user-agent": "Postify/1.0.0"
    }
  });
  return raw?.data?.files[0]?.url || null;
}
var pomf_default = Pomf;

// src/services/quax.ts
var quax_exports = {};
__export(quax_exports, {
  Quax: () => Quax,
  default: () => quax_default
});
var import_axios6 = __toESM(require("axios"));
var import_form_data6 = __toESM(require("form-data"));
async function Quax(data) {
  if (!Buffer.isBuffer(data)) throw new Error("Invalid buffer input!");
  if (FileSize(data) >= MaxFileSize(256)) throw new Error("Max file upload for catbox is only 256MB!");
  const mime = await MimeType(data);
  const form = new import_form_data6.default();
  form.append("files[]", Buffer.from(data), {
    filename: mime ? "zxn-" + Date.now() + "." + mime?.ext : "",
    contentType: mime?.mime || ""
  });
  const raw = await import_axios6.default.post("https://qu.ax/upload.php", form, {
    headers: {
      ...form.getHeaders(),
      "origin": "https://qu.ax",
      "user-agent": "Postify/1.0.0"
    }
  });
  return raw?.data?.files[0]?.url || null;
}
var quax_default = Quax;

// src/services/ryzen.ts
var ryzen_exports = {};
__export(ryzen_exports, {
  Ryzen: () => Ryzen,
  default: () => ryzen_default
});
var import_axios7 = __toESM(require("axios"));
var import_form_data7 = __toESM(require("form-data"));
async function Ryzen(data) {
  if (!Buffer.isBuffer(data)) throw new Error("Invalid buffer input!");
  if (FileSize(data) >= MaxFileSize(100)) throw new Error("Max file upload for catbox is only 100MB!");
  const mime = await MimeType(data);
  const form = new import_form_data7.default();
  form.append("file", Buffer.from(data), {
    filename: mime ? "zxn-" + Date.now() + "." + mime?.ext : "",
    contentType: mime?.mime || ""
  });
  const raw = await import_axios7.default.post("https://api.ryzendesu.vip/api/uploader/ryzencdn", form, {
    headers: {
      ...form.getHeaders()
    }
  });
  return raw?.data?.url || null;
}
var ryzen_default = Ryzen;

// src/services/shojib.ts
var shojib_exports = {};
__export(shojib_exports, {
  Shojib: () => Shojib,
  default: () => shojib_default
});
var import_axios8 = __toESM(require("axios"));
var import_form_data8 = __toESM(require("form-data"));
async function Shojib(data) {
  if (!Buffer.isBuffer(data)) throw new Error("Invalid buffer input!");
  if (FileSize(data) >= MaxFileSize(100)) throw new Error("Max file upload for catbox is only 100MB!");
  const mime = await MimeType(data);
  const form = new import_form_data8.default();
  form.append("file", Buffer.from(data), {
    filename: mime ? "zxn." + mime?.ext : "",
    contentType: mime?.mime || ""
  });
  const raw = await import_axios8.default.post("https://chat-gpt.photos/api/uploadImage", form, {
    headers: {
      ...form.getHeaders()
    }
  });
  return raw?.data?.location || null;
}
var shojib_default = Shojib;

// src/services/tmperhabot.ts
var tmperhabot_exports = {};
__export(tmperhabot_exports, {
  TmpErhabot: () => TmpErhabot,
  default: () => tmperhabot_default
});
var import_axios9 = __toESM(require("axios"));
var import_form_data9 = __toESM(require("form-data"));
async function TmpErhabot(data) {
  if (!Buffer.isBuffer(data)) throw new Error("Invalid buffer input!");
  if (FileSize(data) >= MaxFileSize(100)) throw new Error("Max file upload for catbox is only 100MB!");
  const mime = await MimeType(data);
  const form = new import_form_data9.default();
  form.append("someFiles", Buffer.from(data), {
    filename: mime ? "zxn-" + Date.now() + "." + mime.ext : "",
    contentType: mime?.mime || ""
  });
  const raw = await import_axios9.default.post("https://tmp.erhabot.xyz/api/upload", form, {
    headers: {
      ...form.getHeaders()
    }
  });
  return raw?.data?.data?.url || null;
}
var tmperhabot_default = TmpErhabot;

// src/services/uguu.ts
var uguu_exports = {};
__export(uguu_exports, {
  Uguu: () => Uguu,
  default: () => uguu_default
});
var import_axios10 = __toESM(require("axios"));
var import_form_data10 = __toESM(require("form-data"));
async function Uguu(data) {
  if (!Buffer.isBuffer(data)) throw new Error("Invalid buffer input!");
  if (FileSize(data) >= MaxFileSize(100)) throw new Error("Max file upload for catbox is only 100MB!");
  const type = await MimeType(data);
  const form = new import_form_data10.default();
  form.append("files[]", Buffer.from(data), {
    filename: type ? "uguu-" + Date.now() + "." + type.ext : "",
    contentType: type?.mime || ""
  });
  const raw = await import_axios10.default.post("https://uguu.se/upload", form, {
    headers: {
      ...form.getHeaders(),
      "origin": "https://uguu.se",
      "user-agent": "UguuUploader/1.0.0"
    }
  });
  return raw?.data || null;
}
var uguu_default = Uguu;

// src/services/videy.ts
var videy_exports = {};
__export(videy_exports, {
  Videy: () => Videy,
  default: () => videy_default
});
var import_axios11 = __toESM(require("axios"));
var import_form_data11 = __toESM(require("form-data"));
async function Videy(data) {
  if (!Buffer.isBuffer(data)) throw new Error("Invalid buffer input!");
  if (FileSize(data) >= MaxFileSize(1e3)) throw Error("Max size upload for VideyCDN is only 1GB!");
  const mime = await MimeType(data);
  if (!mime || !["mp4", "mov"].includes(mime?.ext)) throw Error("Wrong filetype, please select an .mp4 or .mov");
  const form = new import_form_data11.default();
  form.append("file", Buffer.from(data), {
    filename: mime ? "zxn-" + Date.now() + "." + mime.ext : "",
    contentType: mime?.mime || ""
  });
  const raw = await import_axios11.default.post("https://videy.co/api/upload", form, {
    headers: {
      ...form.getHeaders()
    }
  });
  return "https://cdn.videy.co/" + raw?.data?.id + "." + mime?.ext || null;
}
var videy_default = Videy;

// src/services/idnet.ts
var idnet_exports = {};
__export(idnet_exports, {
  IDNet: () => IDNet,
  default: () => idnet_default
});
var import_axios12 = __toESM(require("axios"));
var import_form_data12 = __toESM(require("form-data"));
async function IDNet(data) {
  if (!Buffer.isBuffer(data)) throw new Error("Invalid buffer input!");
  if (FileSize(data) >= MaxFileSize(1e3)) throw new Error("Max file upload for catbox is only 1GB!");
  const mime = await MimeType(data);
  const form = new import_form_data12.default();
  form.append("file", Buffer.from(data), {
    filename: mime ? "zxn-" + Date.now() + "." + mime?.ext : "",
    contentType: mime?.mime || ""
  });
  const raw = await import_axios12.default.post("https://file.idnet.my.id/upload.php", form, {
    headers: {
      ...form.getHeaders(),
      "origin": "https://file.idnet.my.id",
      "user-agent": "Postify/1.0.0"
    }
  });
  return raw?.data?.file?.url || null;
}
var idnet_default = IDNet;

// src/services/cloudku.ts
var cloudku_exports = {};
__export(cloudku_exports, {
  Cloudku: () => Cloudku,
  default: () => cloudku_default
});
var import_axios13 = __toESM(require("axios"));
var import_form_data13 = __toESM(require("form-data"));
async function Cloudku(data) {
  if (!Buffer.isBuffer(data)) throw new Error("Invalid buffer input!");
  if (FileSize(data) >= MaxFileSize(1e4)) throw new Error("Max file upload for catbox is only 10GB!");
  const mime = await MimeType(data);
  const form = new import_form_data13.default();
  form.append("file", Buffer.from(data), {
    filename: mime ? "zxn-" + Date.now() + "." + mime?.ext : "",
    contentType: mime?.mime || ""
  });
  const raw = await import_axios13.default.post("https://cloudkuimages.guru/upload.php", form, {
    headers: {
      ...form.getHeaders(),
      "origin": "https://cloudkuimages.guru",
      "user-agent": "Postify/1.0.0"
    }
  });
  return raw?.data?.result?.url || null;
}
var cloudku_default = Cloudku;

// src/services/nyxs.ts
var nyxs_exports = {};
__export(nyxs_exports, {
  Nyxs: () => Nyxs,
  default: () => nyxs_default
});
var import_axios14 = __toESM(require("axios"));
var import_form_data14 = __toESM(require("form-data"));
async function Nyxs(data) {
  if (!Buffer.isBuffer(data)) throw new Error("Invalid buffer input!");
  if (FileSize(data) >= MaxFileSize(1e3)) throw new Error("Max file upload for catbox is only 1GB!");
  const mime = await MimeType(data);
  const form = new import_form_data14.default();
  form.append("file", Buffer.from(data), {
    filename: mime ? "zxn-" + Date.now() + "." + mime?.ext : "",
    contentType: mime?.mime || ""
  });
  const raw = await import_axios14.default.post("https://uploader.nyxs.pw/upload", form, {
    headers: {
      ...form.getHeaders(),
      "origin": "https://uploader.nyxs.pw",
      "user-agent": "Postify/1.0.0"
    }
  });
  return raw?.data?.match(/https:\/\/uploader\.nyxs\.pw\/tmp\/[A-Za-z0-9\-]+\.[A-Za-z0-9]+/)[0] || null;
}
var nyxs_default = Nyxs;

// src/index.ts
var index_default = {
  Catbox: catbox_exports,
  Erhabot: erhabot_exports,
  FastUrl: fasturl_exports,
  Litterbox: litterbox_exports,
  Pomf: pomf_exports,
  Quax: quax_exports,
  Ryzen: ryzen_exports,
  Shojib: shojib_exports,
  TmpErhabot: tmperhabot_exports,
  Uguu: uguu_exports,
  Videy: videy_exports,
  IDNet: idnet_exports,
  Cloudku: cloudku_exports,
  Nyxs: nyxs_exports
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Catbox,
  Cloudku,
  Erhabot,
  FastUrl,
  IDNet,
  Litterbox,
  Nyxs,
  Pomf,
  Quax,
  Ryzen,
  Shojib,
  TmpErhabot,
  Uguu,
  Videy
});
