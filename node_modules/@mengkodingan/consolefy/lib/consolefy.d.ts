type Config = {
    prefixes?: {
        warn?: string;
        success?: string;
        error?: string;
        info?: string;
        [key: string]: string | undefined;
    };
    format?: string;
    silent?: boolean;
    tag?: string;
    theme?: {
        warn?: (text: string) => string;
        success?: (text: string) => string;
        error?: (text: string) => string;
        info?: (text: string) => string;
        [key: string]: ((text: string) => string) | undefined;
    };
};
declare class Consolefy {
    private config;
    private isGrouping;
    private groupName;
    constructor(initialConfig?: Config);
    setConfig(newConfig: Config): void;
    private formatMessage;
    setPrefix(type: keyof NonNullable<typeof this.config.prefixes>, prefix: string): void;
    setTheme(type: keyof NonNullable<typeof this.config.theme>, theme: (text: string) => string): void;
    setFormat(format: string): void;
    resetFormat(): void;
    setTag(tag: string): void;
    resetTag(): void;
    silent(state: boolean): void;
    defineLogLevel(level: string, options: {
        prefix: string;
        theme?: (text: string) => string;
    }): void;
    group(name: string): void;
    groupEnd(): void;
    log(level: string, ...messages: any[]): void;
    warn(...messages: any[]): void;
    success(...messages: any[]): void;
    error(...messages: any[]): void;
    info(...messages: any[]): void;
}
export default Consolefy;
//# sourceMappingURL=consolefy.d.ts.map