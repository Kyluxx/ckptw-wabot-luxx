"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const colorette_1 = require("colorette");
class Consolefy {
    constructor(initialConfig = {}) {
        this.isGrouping = false;
        this.groupName = "";
        this.config = {
            prefixes: Object.assign({ warn: "WARN", success: "SUCCESS", error: "ERROR", info: "INFO" }, initialConfig.prefixes),
            format: initialConfig.format || "{prefix}{tag} {message}",
            silent: initialConfig.silent || false,
            tag: initialConfig.tag || undefined,
            theme: Object.assign({ warn: (text) => (0, colorette_1.bgYellow)((0, colorette_1.black)(text)), success: (text) => (0, colorette_1.bgGreen)((0, colorette_1.black)(text)), error: (text) => (0, colorette_1.bgRed)((0, colorette_1.black)(text)), info: (text) => (0, colorette_1.bgBlue)((0, colorette_1.black)(text)) }, initialConfig.theme),
        };
    }
    setConfig(newConfig) {
        this.config = Object.assign(Object.assign(Object.assign({}, this.config), newConfig), { prefixes: Object.assign(Object.assign({}, this.config.prefixes), newConfig.prefixes), theme: Object.assign(Object.assign({}, this.config.theme), newConfig.theme) });
    }
    formatMessage(type, message) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        let str = ((_h = (_g = (_a = this.config.format) === null || _a === void 0 ? void 0 : _a.replace(/{prefix}/g, ((_f = (_c = (_b = this.config.theme) === null || _b === void 0 ? void 0 : _b[type]) === null || _c === void 0 ? void 0 : _c.call(_b, ` ${(_e = (_d = this.config.prefixes) === null || _d === void 0 ? void 0 : _d[type]) !== null && _e !== void 0 ? _e : ''} `)) !== null && _f !== void 0 ? _f : type))) === null || _g === void 0 ? void 0 : _g.replace(/{tag}/g, this.config.tag ? ` ${(0, colorette_1.gray)(`[${this.config.tag}]`)}` : "")) === null || _h === void 0 ? void 0 : _h.replace(/{message}/g, message)) || `${message}`;
        return str.replace(/^\s+|\s+$/gm, '');
    }
    setPrefix(type, prefix) {
        this.config.prefixes = Object.assign(Object.assign({}, this.config.prefixes), { [type]: prefix });
    }
    setTheme(type, theme) {
        this.config.theme = Object.assign(Object.assign({}, this.config.theme), { [type]: theme });
    }
    setFormat(format) {
        this.config.format = format;
    }
    resetFormat() {
        this.config.format = "{prefix}{tag} {message}";
    }
    setTag(tag) {
        this.config.tag = tag;
    }
    resetTag() {
        this.config.tag = "";
    }
    silent(state) {
        this.config.silent = state;
    }
    defineLogLevel(level, options) {
        this.config.prefixes[level] = options.prefix;
        if (options.theme) {
            this.config.theme[level] = options.theme;
        }
    }
    group(name) {
        this.isGrouping = true;
        this.groupName = name;
        console.log(`\n${(0, colorette_1.gray)('┌')} ${(0, colorette_1.bgBlue)((0, colorette_1.black)(` GROUP: ${name} `))}\n${(0, colorette_1.gray)('│')}`);
    }
    groupEnd() {
        this.isGrouping = false;
        console.log(`${(0, colorette_1.gray)('└')} ${(0, colorette_1.bgBlue)((0, colorette_1.black)(` END GROUP: ${this.groupName} `))}`);
        this.groupName = "";
    }
    log(level, ...messages) {
        if (this.config.silent)
            return;
        if (this.isGrouping) {
            console.log(`${(0, colorette_1.gray)('│')} ${this.formatMessage(level, messages.join(" "))}\n${(0, colorette_1.gray)('│')}`);
            return;
        }
        console.log(`\n${this.formatMessage(level, messages.join(" "))}`);
    }
    warn(...messages) {
        this.log("warn", messages.join(" "));
    }
    success(...messages) {
        this.log("success", messages.join(" "));
    }
    error(...messages) {
        this.log("error", messages.join(" "));
    }
    info(...messages) {
        this.log("info", messages.join(" "));
    }
}
exports.default = Consolefy;
