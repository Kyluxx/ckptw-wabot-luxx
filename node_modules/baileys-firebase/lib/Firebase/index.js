"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFireAuthState = void 0;
const admin = __importStar(require("firebase-admin"));
const Utils_1 = require("../Utils");
admin.initializeApp({
    credential: admin.credential.cert("fireSession.json")
}, "sessionDb");
const db = admin.firestore(admin.app("sessionDb"));
const useFireAuthState = async (config) => {
    const collectionName = config.tableName || "amiruldev-auth";
    const session = config.session || "amiruldev-waAuth";
    const query = async (collection, docId) => {
        const doc = await db.collection(collection).doc(docId).get();
        if (doc.exists) {
            return doc.data();
        }
        return {};
    };
    const readData = async (id) => {
        const data = await query(collectionName, `${session}-${id}`);
        if (!data.value) {
            return null;
        }
        const creds = typeof data.value === "object"
            ? JSON.stringify(data.value)
            : data.value;
        return JSON.parse(creds, Utils_1.BufferJSON.reviver);
    };
    const writeData = async (id, value) => {
        const batch = db.batch();
        const valueFixed = JSON.stringify(value, Utils_1.BufferJSON.replacer);
        const docRef = db.collection(collectionName).doc(`${session}-${id}`);
        batch.set(docRef, { value: valueFixed }, { merge: true });
        try {
            await batch.commit();
        }
        catch (error) {
            console.error("Error writing batch:", error);
        }
    };
    const removeData = async (id) => {
        await db.collection(collectionName).doc(`${session}-${id}`).delete();
    };
    const clearAll = async () => {
        const snapshot = await db
            .collection(collectionName)
            .where("session", "==", session)
            .get();
        snapshot.forEach(doc => {
            if (doc.id !== "creds") {
                doc.ref.delete();
            }
        });
    };
    const removeAll = async () => {
        const snapshot = await db
            .collection(collectionName)
            .where("session", "==", session)
            .get();
        snapshot.forEach(doc => {
            doc.ref.delete();
        });
    };
    const creds = (await readData("creds")) || (0, Utils_1.initAuthCreds)();
    return {
        state: {
            creds,
            keys: {
                get: async (type, ids) => {
                    const data = {};
                    for (const id of ids) {
                        let value = await readData(`${type}-${id}`);
                        if (type === "app-state-sync-key" && value) {
                            value = (0, Utils_1.fromObject)(value);
                        }
                        data[id] = value;
                    }
                    return data;
                },
                set: async (data) => {
                    for (const category in data) {
                        for (const id in data[category]) {
                            const value = data[category][id];
                            const name = `${category}-${id}`;
                            if (value) {
                                await writeData(name, value);
                            }
                            else {
                                await removeData(name);
                            }
                        }
                    }
                }
            }
        },
        saveCreds: async () => {
            await writeData("creds", creds);
        },
        clear: async () => {
            await clearAll();
        },
        removeCreds: async () => {
            await removeAll();
        },
        query: async (collection, docId) => {
            return await query(collection, docId);
        }
    };
};
exports.useFireAuthState = useFireAuthState;
